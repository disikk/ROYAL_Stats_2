#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Базовый класс для модулей статистики в покерном трекере ROYAL_Stats.
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional


class BaseStat(ABC):
    """
    Абстрактный базовый класс для всех модулей статистики.
    
    Все модули статистики должны наследоваться от этого класса и реализовывать
    его абстрактные методы.
    """
    
    @property
    @abstractmethod
    def name(self) -> str:
        """
        Уникальный идентификатор модуля.
        
        Returns:
            Строка с уникальным идентификатором модуля.
        """
        pass
    
    @property
    @abstractmethod
    def display_name(self) -> str:
        """
        Отображаемое имя для UI.
        
        Returns:
            Строка с человекочитаемым названием модуля.
        """
        pass
    
    @abstractmethod
    def calculate(self, db_repository, session_id: Optional[str] = None) -> Dict[str, Any]:
        """
        Вычисляет статистику и возвращает данные.
        
        Args:
            db_repository: Репозиторий для доступа к данным.
            session_id: ID сессии для фильтрации данных (опционально).
            
        Returns:
            Словарь с рассчитанными статистическими данными.
        """
        pass
    
    @abstractmethod
    def get_cards_config(self) -> List[Dict[str, Any]]:
        """
        Возвращает конфигурацию карточек для отображения в UI.
        
        Returns:
            Список словарей с конфигурацией карточек.
            Каждый словарь содержит:
            - 'id': Идентификатор поля данных
            - 'title': Заголовок карточки
            - 'format': Формат отображения значения (например '{:.2f}')
            - 'color': Цвет значения (в формате CSS/HTML, например '#1e88e5')
            - 'width': Ширина карточки (1, 2, 3, ...)
        """
        pass
    
    @abstractmethod
    def get_chart_config(self) -> Dict[str, Any]:
        """
        Возвращает конфигурацию графика для отображения в UI.
        
        Returns:
            Словарь с конфигурацией графика:
            - 'type': Тип графика ('bar', 'line', 'pie', ...)
            - 'title': Заголовок графика
            - 'x_label': Подпись оси X
            - 'y_label': Подпись оси Y
            - 'data_keys': Ключи для данных из рассчитанной статистики
            - и другие специфичные для типа графика настройки
        """
        pass

    def get_settings_config(self) -> List[Dict[str, Any]]:
        """
        Возвращает конфигурацию настроек модуля для отображения в UI.
        
        Returns:
            Список словарей с конфигурацией настроек.
            Каждый словарь содержит:
            - 'id': Идентификатор настройки
            - 'name': Название настройки
            - 'type': Тип настройки ('boolean', 'number', 'string', 'select', ...)
            - 'value': Значение по умолчанию
            - 'options': Список возможных значений (для 'select')
        """
        # По умолчанию у модуля нет настроек
        return []
    
    def get_description(self) -> str:
        """
        Возвращает описание модуля для отображения в UI.
        
        Returns:
            Строка с описанием модуля.
        """
        # Метод может быть переопределен в подклассе
        return f"Модуль статистики {self.display_name}"
    
    def get_sort_order(self) -> int:
        """
        Возвращает порядок сортировки модуля для отображения в UI.
        
        Returns:
            Целое число, определяющее порядок модуля.
            Модули с меньшим значением отображаются раньше.
        """
        # По умолчанию сортировка по алфавиту
        return 100
    
    def is_enabled_by_default(self) -> bool:
        """
        Определяет, должен ли модуль быть включен по умолчанию.
        
        Returns:
            True, если модуль должен быть включен по умолчанию, иначе False.
        """
        # По умолчанию все модули включены
        return True