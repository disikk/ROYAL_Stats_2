# Royal Stats Техническое описание архитектуры

## Обзор Архитектуры

Royal Stats построен на принципах чистой архитектуры с событийно-ориентированным подходом:

### Слои архитектуры:
1. **Presentation Layer (UI)** - уровень взаимодействия с пользователем
   - Паттерн ViewModel для изоляции бизнес-логики от UI
   - UI компоненты отвечают только за отображение
2. **Service Layer** - уровень сервисов и координации
   - AppFacade как единая точка входа для UI
   - Модульные сервисы: ImportService, StatisticsService
   - EventBus для слабосвязанной коммуникации
3. **Domain Layer (Models)** - уровень представления данных предметной области
   - Типизированные dataclass модели с BaseModel
   - Универсальная сериализация/десериализация
4. **Data Access Layer (Repositories)** - уровень абстракции доступа к данным
   - BaseRepository с общей логикой работы с БД
   - Специализированные репозитории для каждой сущности
5. **Infrastructure Layer** - уровень низкоуровневых компонентов
   - Стандартизированные парсеры с типизированными результатами
   - DatabaseManager как синглтон для управления соединениями

### Принципы взаимодействия:
- Dependency Injection через конструкторы
- UI → AppFacade → Services → Repositories/Parsers → DatabaseManager
- События публикуются через EventBus для уведомления заинтересованных компонентов
- Строгая типизация на всех уровнях

## Структура Базы Данных (SQLite)

### Основные таблицы:

#### sessions
```sql
id (INTEGER PRIMARY KEY AUTOINCREMENT)
session_id (TEXT UNIQUE NOT NULL)
session_name (TEXT NOT NULL)
created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
tournaments_count (INTEGER DEFAULT 0)
knockouts_count (INTEGER DEFAULT 0)
avg_finish_place (REAL DEFAULT 0)
total_prize (REAL DEFAULT 0)
total_buy_in (REAL DEFAULT 0)
```
**Назначение**: Хранение метаданных и агрегированной статистики по сессиям импорта.

#### tournaments
```sql
id (INTEGER PRIMARY KEY AUTOINCREMENT)
tournament_id (TEXT UNIQUE NOT NULL)
tournament_name (TEXT)
start_time (TEXT)
buyin (REAL)
payout (REAL)
finish_place (INTEGER)
ko_count (INTEGER DEFAULT 0)
session_id (TEXT, FOREIGN KEY)
reached_final_table (BOOLEAN DEFAULT 0)
final_table_initial_stack_chips (REAL)
final_table_initial_stack_bb (REAL)
```
**Назначение**: Агрегированная информация по турнирам, объединяющая данные из HH и TS.

#### hero_final_table_hands
```sql
id (INTEGER PRIMARY KEY AUTOINCREMENT)
tournament_id (TEXT NOT NULL, FOREIGN KEY)
hand_id (TEXT NOT NULL)
hand_number (INTEGER)
table_size (INTEGER)
bb (REAL)
hero_stack (REAL)
hero_ko_this_hand (INTEGER DEFAULT 0)
session_id (TEXT, FOREIGN KEY)
is_early_final (BOOLEAN DEFAULT 0)
UNIQUE (tournament_id, hand_id)
```
**Назначение**: Детальная информация по раздачам финального стола для точного подсчета KO.

#### overall_stats
```sql
id (INTEGER PRIMARY KEY CHECK (id = 1))
total_tournaments (INTEGER DEFAULT 0)
total_final_tables (INTEGER DEFAULT 0)
total_knockouts (INTEGER DEFAULT 0)
avg_finish_place (REAL DEFAULT 0)
avg_finish_place_ft (REAL DEFAULT 0)
total_prize (REAL DEFAULT 0)
total_buy_in (REAL DEFAULT 0)
avg_ko_per_tournament (REAL DEFAULT 0)
avg_ft_initial_stack_chips (REAL DEFAULT 0)
avg_ft_initial_stack_bb (REAL DEFAULT 0)
big_ko_x1_5, big_ko_x2, big_ko_x10, big_ko_x100, big_ko_x1000, big_ko_x10000 (INTEGER DEFAULT 0)
early_ft_ko_count (INTEGER DEFAULT 0)
early_ft_ko_per_tournament (REAL DEFAULT 0)
last_updated (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
```
**Назначение**: Кеширование агрегированных статистик для быстрого доступа.

#### places_distribution
```sql
place (INTEGER PRIMARY KEY)
count (INTEGER DEFAULT 0)
```
**Назначение**: Распределение финишных мест на финальном столе (1-9).

## Архитектурные Компоненты

### 1. Service Layer

#### AppFacade (services/app_facade.py)
**Роль**: Единая точка входа для UI слоя
**Ответственности**:
- Координация вызовов между сервисами
- Публикация событий через EventBus
- Предоставление упрощенного API для UI
- Создание ViewModel объектов

**Ключевые методы**:
- `import_files()` - делегирует импорт в ImportService
- `switch_database()` - переключение БД с публикацией события
- `create_stats_grid_viewmodel()` - создание ViewModel для статистики
- `get_overall_stats()` - получение кешированной статистики

#### ImportService (services/import_service.py)
**Роль**: Изолированная логика импорта файлов
**Ответственности**:
- Классификация файлов (HH/TS)
- Координация работы парсеров
- Объединение данных из разных источников
- Сохранение через репозитории
- Публикация DataImportedEvent

#### StatisticsService (services/statistics_service.py)
**Роль**: Управление расчетом и кешированием статистики
**Ответственности**:
- Работа со стат-плагинами
- Инкрементальное обновление статистики
- Трехуровневое кеширование
- Публикация StatisticsUpdatedEvent

#### EventBus (services/event_bus.py)
**Роль**: Шина событий для слабосвязанной коммуникации
**Особенности**:
- Паттерн Observer со слабыми ссылками
- Потокобезопасность
- Синглтон через get_event_bus()

### 2. ViewModel Layer (viewmodels/*)
**Компоненты**:
- `StatCardViewModel` - данные для статистических карточек
- `StatsGridViewModel` - полная модель для главного дашборда
- `BigKOCardViewModel` - специализированные карточки Big KO

**Принципы**:
- Содержат готовые для отображения данные
- Вся логика форматирования и расчетов
- UI только применяет данные из ViewModel

### 3. Database Layer

#### DatabaseManager (db/manager.py)
**Роль**: Синглтон для управления соединениями с БД
**Ответственности**:
- Потокобезопасная работа с SQLite
- Переключение активной БД
- Создание схемы при инициализации
- Управление жизненным циклом соединений

#### BaseRepository (db/repositories/base_repository.py)
**Роль**: Базовый класс для всех репозиториев
**Функционал**:
- Общие методы работы с БД: execute_query, execute_command, execute_many
- Автоматическое логирование ошибок
- Типизация через дженерики
- Абстрактный метод _row_to_model для преобразования данных

#### Специализированные репозитории (db/repositories/*)
**Компоненты**:
- `TournamentRepository` - CRUD для турниров с оптимизированными методами
- `SessionRepository` - CRUD для сессий с эффективным расчетом статистики
- `OverallStatsRepository` - работа с агрегированной статистикой
- `PlaceDistributionRepository` - распределение мест
- `FinalTableHandRepository` - раздачи финального стола с batch-операциями

**Принципы**:
- Наследуются от BaseRepository
- Содержат специализированные методы для оптимизации
- Используют составные индексы для производительности

### 4. Parsers (parsers/*)

#### BaseParser
**Роль**: Базовый класс для всех парсеров
**Функции**:
- Дженерик интерфейс с типизированным результатом
- Абстрактный метод parse с типизацией
- Стандартизированный контракт для всех парсеров

#### Типизированные результаты (parsers/parse_results.py)
**Компоненты**:
- `HandHistoryResult` - dataclass для результата парсинга HH
- `TournamentSummaryResult` - dataclass для результата парсинга TS
- Методы валидации is_valid()

#### HandHistoryParser
**Ответственности**:
- Парсинг файлов истории рук (.txt, .hh, .log)
- Извлечение данных о финальном столе
- Подсчет нокаутов по раздачам
- Определение стека Hero на старте финального стола

#### TournamentSummaryParser  
**Ответственности**:
- Парсинг файлов итогов турниров (.ts, .summary)
- Извлечение бай-инов, выплат, финишных мест
- Получение названий и времени турниров

### 5. Models (models/*)

#### BaseModel (models/base_model.py)
**Роль**: Базовый класс для всех моделей
**Функционал**:
- Универсальные методы as_dict/to_dict для сериализации
- Метод from_dict с автоматической фильтрацией полей
- update_from_dict для обновления полей
- Работает с любыми dataclass наследниками
**Компоненты**:
- `Tournament` - модель турнира
- `Session` - модель сессии импорта
- `OverallStats` - агрегированная статистика
- `FinalTableHand` - раздача финального стола

**Принципы**:
- Все модели наследуются от BaseModel
- Простые dataclass структуры
- Автоматическая сериализация/десериализация
- Минимум бизнес-логики

### 6. Statistics Modules (stats/*)

#### Архитектура стат-плагинов:
- `BaseStat` - базовый интерфейс для всех статистик
- Автономные плагины работающие с сырыми данными
- Поддержка precomputed_stats для оптимизации
- Единая сигнатура compute() для всех плагинов
- Pluggable архитектура для расширяемости

#### Реализованные статистики:
- `TotalKOStat` - общее количество нокаутов
- `ITMStat` - процент попадания в призы
- `ROIStat` - рентабельность инвестиций
- `BigKOStat` - статистика больших нокаутов
- `FinalTableReachStat` - процент достижения финального стола
- `AvgFTInitialStackStat` - средний стек на старте финалки
- `EarlyFTKOStat` - нокауты в ранней стадии финалки
- И другие специализированные статистики

### 7. UI Layer (ui/*)

#### MainWindow
**Роль**: Главное окно приложения
**Функции**:
- Получает AppFacade через конструктор (DI)
- Координация всех UI компонентов
- Панель инструментов с быстрой статистикой
- Управление вкладками
- Передает AppFacade дочерним компонентам

#### Основные UI компоненты:
- `StatsGrid` - использует StatsGridViewModel для отображения
- `TournamentView` - таблица турниров через AppFacade
- `SessionView` - просмотр сессий через AppFacade
- `DatabaseManagementDialog` - управление БД через AppFacade

**Принципы UI компонентов**:
- Получают AppFacade в конструкторе
- Используют ViewModel для отображения данных
- Не содержат бизнес-логики
- Только отображают готовые данные

#### Background Processing (ui/background.py):
- `ThreadManager` - управление фоновыми задачами
- `ImportThread` - асинхронный импорт файлов
- Поддержка прогресс-индикации и отмены операций

## Потоки Данных

### Процесс импорта файлов:
1. **UI**: Пользователь выбирает файлы/папки
2. **MainWindow**: Создает ImportThread с прогресс-диалогом
3. **ImportThread**: Вызывает AppFacade.import_files()
4. **AppFacade**: Делегирует в ImportService
5. **ImportService**: 
   - Создает новую сессию через SessionRepository
   - Классифицирует файлы через FileClassifier
   - Вызывает типизированные парсеры
   - Получает HandHistoryResult и TournamentSummaryResult
   - Объединяет данные по турнирам
   - Сохраняет через репозитории
   - Публикует DataImportedEvent
6. **StatisticsService** (по событию):
   - Получает уведомление о новых данных
   - Выполняет инкрементальное обновление
   - Вызывает автономные стат-плагины
   - Обновляет кеши
   - Публикует StatisticsUpdatedEvent
7. **UI**: Обновляет отображение через ViewModel

### Кеширование и производительность:
- **Трехуровневый кеш статистики**:
  1. Память (StatisticsService._overall_stats_cache)
  2. База данных (overall_stats таблица)
  3. Файл (stats_cache.json)
- **Инкрементальные обновления** статистики для больших БД
- **Оптимизированные SQL запросы** с составными индексами
- **Batch операции** для массовых вставок
- **Ленивая загрузка** данных в UI вкладках
- **ViewModel паттерн** для минимизации обработки в UI

## Конфигурация

### AppConfig (services/app_config.py)
**Централизованная конфигурация через dataclass**:
- `hero_name` - имя отслеживаемого игрока
- `default_db_dir` - директория для баз данных
- `final_table_size = 9` - размер финального стола
- `early_ft_min_players = 6` - граница ранней финалки
- `cache_file_path` - путь к файлу кеша
- UI настройки (тема, масштаб, язык)

**Внедрение зависимостей**:
- Передается через конструкторы сервисов
- Исключает глобальные переменные
- Облегчает тестирование

### Файловая структура:
- `databases/` - директория с базами данных
- `last_db_path.txt` - путь к последней БД
- `stats_cache.json` - кеш статистики

## Особенности Реализации

### Многопоточность:
- UI работает в главном потоке
- Импорт и пересчет статистики - в фоновых потоках
- Потокобезопасная работа с базой данных
- Thread pool для множественных операций

### Управление памятью:
- Кеширование часто используемых данных
- Освобождение ресурсов при переключении БД
- Оптимизация SQL запросов

### Расширяемость:
- Плагинная архитектура статистик
- Легкое добавление новых типов парсеров
- Модульная структура UI компонентов

### Отказоустойчивость:
- Валидация данных на всех уровнях
- Graceful degradation при ошибках парсинга
- Откат транзакций при ошибках
- Подробное логирование для диагностики

## Диаграмма архитектуры

```
┌─────────────────────────────────────────────────────────┐
│                  UI LAYER (ViewModels)                  │
│  MainWindow │ StatsGrid │ TournamentView │ SessionView  │
└─────────────────────┬───────────────────────────────────┘
                      │ DI
┌─────────────────────▼───────────────────────────────────┐
│                    AppFacade                            │
│              (Single Entry Point)                       │
└──────────┬──────────────────────┬───────────────────────┘
           │                      │
┌──────────▼──────────┐  ┌────────▼───────────────────────┐
│   SERVICE LAYER     │  │        EVENT BUS               │
│                     │  │   (Weak-coupled Events)        │
│ • ImportService     │◄─┤                                │
│ • StatisticsService │  │ • DataImportedEvent           │
│ • AppConfig         │  │ • StatisticsUpdatedEvent      │
└─────────────────────┘  │ • DatabaseChangedEvent        │
           │             └────────────────────────────────┘
┌──────────▼──────────┐    ┌──────────────────────────────┐
│   DOMAIN LAYER      │    │    INFRASTRUCTURE LAYER     │
│   (BaseModel)       │    │                             │
│ • Tournament        │    │ • BaseParser + Results      │
│ • Session           │    │ • HandHistoryParser         │
│ • OverallStats      │    │ • TournamentSummaryParser   │
│ • FinalTableHand    │    │ • FileClassifier            │
└─────────────────────┘    └─────────────────────────────┘
           │                          │
┌──────────▼──────────────────────────▼───────────────────┐
│          DATA ACCESS LAYER (BaseRepository)            │
│                                                         │
│  TournamentRepo │ SessionRepo │ StatsRepo │ HandRepo    │
└─────────────────────────┬───────────────────────────────┘
                          │
┌─────────────────────────▼───────────────────────────────┐
│            SQLite DATABASE (with indexes)               │
│  sessions │ tournaments │ hero_final_table_hands │ ...  │
└─────────────────────────────────────────────────────────┘
```

## Ключевые улучшения после рефакторинга

1. **Чистая архитектура**: Четкое разделение слоев с односторонними зависимостями
2. **Событийная архитектура**: EventBus для слабосвязанной коммуникации между компонентами
3. **Dependency Injection**: Все зависимости передаются явно через конструкторы
4. **Паттерн ViewModel**: Изоляция бизнес-логики от UI компонентов
5. **Типобезопасность**: Строгая типизация на всех уровнях, включая парсеры
6. **Базовые классы**: BaseModel и BaseRepository для единообразия и переиспользования
7. **Автономные плагины**: Стат-плагины работают с сырыми данными независимо
8. **Инкрементальные обновления**: Оптимизация для работы с большими БД
9. **Единая точка входа**: AppFacade как фасад для всех операций UI

Эта архитектура обеспечивает высокую масштабируемость, тестируемость, производительность и поддерживаемость кода, следуя современным принципам разработки ПО.